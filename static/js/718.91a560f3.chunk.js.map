{"version":3,"file":"static/js/718.91a560f3.chunk.js","mappings":"qNACA,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAuF,wB,SCiCvF,MA7BA,YAA+B,IAAVA,EAAS,EAATA,MACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,eAAIC,UAAWC,EAAf,UACE,UAAC,KAAD,CAAMC,GAAE,kBAAaL,EAAMM,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,WACE,gBACEE,UAAWC,EACXK,IACET,EAAMU,cAAN,yCACsCV,EAAMU,eACxCC,EAENC,IAAKZ,EAAMa,kBAEb,cAAGV,UAAWC,EAAd,SAAuBJ,EAAMa,qBAIpC,ECvBD,EAA6B,+BCmB7B,MAhBA,YAAqC,IAAfC,EAAc,EAAdA,WACpB,OACE,eAAIX,UAAWC,EAAf,SACGU,EAAWC,KAAI,SAAAf,GAAK,OACnB,SAAC,EAAD,CAA0BA,MAAOA,GAAjBA,EAAMM,GADH,KAK1B,C,qICXD,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAyF,0B,SCmDzF,MAhDA,YAAkC,IAAbU,EAAY,EAAZA,SACnB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACMC,GAAUC,EAAAA,EAAAA,QAAO,MAoBjBC,EAAQ,WACZH,EAAe,GAChB,EAED,OACE,kBAAMhB,UAAWC,EAAQY,SAnBN,SAAAO,GACnBA,EAAEC,iBACF,IAAMC,EAAoBP,EAAYQ,OACtC,GAA0B,KAAtBD,EAIF,OAHAL,EAAQO,QAAQC,QAChBR,EAAQO,QAAQE,YAAc,qCAC9BP,IAGFF,EAAQO,QAAQE,YAAc,oBAC9Bb,EAASS,GACTH,GACD,EAOC,WACE,kBACEQ,IAAKV,EACLjB,UAAWC,EACX2B,KAAK,cACLC,MAAOd,EACPe,KAAK,OACLC,aAAa,MACbL,YAAY,oBACZM,WAAS,EACTC,QAjCc,SAAC,GAAiC,IAAD,IAA9BC,OAAgBL,GAAc,EAApBD,KAAoB,EAAdC,OACrCb,EAAea,EAChB,KAiCG,mBAAQ7B,UAAWC,EAAU6B,KAAK,SAAlC,sBAKL,E,kBCID,EA7Ce,WACb,OAAsChB,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,MAAnD,eAAOqB,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCzB,EAAAA,EAAAA,WAAS,GAA3C,eAAO0B,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCAQd,oGAEID,GAAa,GAFjB,SAGyBE,EAAAA,EAAAA,aAA2B5B,GAHpD,OAGU6B,EAHV,OAIIR,EAAiBQ,EAAOC,KAAKC,SAJjC,gDAMIC,QAAQC,IAAR,MANJ,yBAQIP,GAAa,GARjB,6EARc,sBACVH,EAAaW,IAAI,UACnBjC,EAAesB,EAAaW,IAAI,UAE9BlC,GAJU,mCAKZmC,EAcH,GAAE,CAACnC,EAAauB,IAWjB,OACE,6BACE,SAAC,EAAD,CAAWzB,SAXW,SAAAE,GACJ,KAAhBA,GAAsBA,IAAgBuB,EAAaW,IAAI,WACzDjC,EAAeD,GACfwB,EAAgC,KAAhBxB,EAAqB,CAAEoC,MAAOpC,GAAgB,CAAC,GAIlE,IAKIyB,IAAa,SAACY,EAAA,EAAD,IACbjB,IAAkBK,IAAa,SAACa,EAAA,QAAD,CAAY1C,WAAYwB,MAG7D,C,8FChDDmB,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHZ,EAAgB,CACrBa,cADqB,WACJ,OAAD,qHACKF,EAAAA,EAAAA,IAAA,qCAAwCC,IAD7C,cACdE,EADc,yBAEbA,GAFa,4CAGrB,EACKC,aALqB,SAKRP,GAAQ,OAAD,qHACCG,EAAAA,EAAAA,IAAA,+BACCC,EADD,kBACkBJ,IAFnB,cAClBM,EADkB,yBAIjBA,GAJiB,4CAKzB,EACKE,UAXqB,SAWXxD,GAAK,OAAD,qHACOmD,EAAAA,EAAAA,IAAA,iBAAoBnD,EAApB,oBAAkCoD,IADzC,cACZE,EADY,yBAEXA,GAFW,4CAGnB,EACKG,cAfqB,SAePzD,GAAK,OAAD,qHACGmD,EAAAA,EAAAA,IAAA,iBACbnD,EADa,4BACSoD,IAFZ,cAChBE,EADgB,yBAIfA,GAJe,4CAKvB,EACKI,iBArBqB,SAqBJ1D,GAAK,OAAD,qHACAmD,EAAAA,EAAAA,IAAA,iBACbnD,EADa,4BACSoD,IAFT,cACnBE,EADmB,yBAIlBA,GAJkB,4CAK1B,E","sources":["webpack://react-homework-template/./src/components/MovieItem/MovieItem.module.css?431a","components/MovieItem/MovieItem.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","pages/Movies.jsx","services/themoviedbAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MovieItem_item__iPuYx\",\"image\":\"MovieItem_image__wpzZX\",\"text\":\"MovieItem_text__C1V2s\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport noposter from '../../assets/images/noposter.jpg';\nimport s from './MovieItem.module.css';\n\nfunction MovieItem({ movie }) {\n  const location = useLocation();\n\n  return (\n    <li className={s.item}>\n      <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n        <img\n          className={s.image}\n          src={\n            movie.backdrop_path\n              ? `https://image.tmdb.org/t/p/w500${movie.backdrop_path}`\n              : noposter\n          }\n          alt={movie.original_title}\n        />\n        <p className={s.text}>{movie.original_title}</p>\n      </Link>\n    </li>\n  );\n}\n\nMovieItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    backdrop_path: PropTypes.string,\n    original_title: PropTypes.string.isRequired,\n  }),\n};\n\nexport default MovieItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"movieCards\":\"MoviesList_movieCards__sExt4\"};","import PropTypes from 'prop-types';\nimport MovieItem from 'components/MovieItem/MovieItem';\nimport s from './MoviesList.module.css';\n\nfunction MoviesList({ moviesList }) {\n  return (\n    <ul className={s.movieCards}>\n      {moviesList.map(movie => (\n        <MovieItem key={movie.id} movie={movie} />\n      ))}\n    </ul>\n  );\n}\n\nMoviesList.propTypes = {\n  moviesList: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.number.isRequired })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Searchbar_form__D-hp5\",\"input\":\"Searchbar_input__19umw\",\"button\":\"Searchbar_button__nkcjk\"};","import PropTypes from 'prop-types';\nimport { useRef, useState } from 'react';\nimport s from './Searchbar.module.css';\n\nfunction Searchbar({ onSubmit }) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const inputEl = useRef(null);\n\n  const handleInput = ({ target: { name, value } }) => {\n    setSearchQuery(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const trimedSearchQuery = searchQuery.trim();\n    if (trimedSearchQuery === '') {\n      inputEl.current.focus();\n      inputEl.current.placeholder = 'Please enter some movie title';\n      reset();\n      return;\n    }\n    inputEl.current.placeholder = 'Enter movie title';\n    onSubmit(trimedSearchQuery);\n    reset();\n  };\n\n  const reset = () => {\n    setSearchQuery('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <input\n        ref={inputEl}\n        className={s.input}\n        name=\"searchQuery\"\n        value={searchQuery}\n        type=\"text\"\n        autoComplete=\"off\"\n        placeholder=\"Enter movie title\"\n        autoFocus\n        onInput={handleInput}\n      />\n      <button className={s.button} type=\"submit\">\n        Search\n      </button>\n    </form>\n  );\n}\n\nSearchbar.propTypes = { onSubmit: PropTypes.func.isRequired };\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { themoviedbAPI } from 'services/themoviedbAPI';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState(null);\n  const [moviesByQuery, setMoviesByQuery] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (searchParams.get('query')) {\n      setSearchQuery(searchParams.get('query'));\n    }\n    if (searchQuery) {\n      fetchMoviesByQuery();\n    }\n\n    async function fetchMoviesByQuery() {\n      try {\n        setIsLoading(true);\n        const movies = await themoviedbAPI.fetchByQuery(searchQuery);\n        setMoviesByQuery(movies.data.results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [searchQuery, searchParams]);\n\n  const handleSearchQuery = searchQuery => {\n    if (searchQuery !== '' && searchQuery !== searchParams.get('query')) {\n      setSearchQuery(searchQuery);\n      setSearchParams(searchQuery !== '' ? { query: searchQuery } : {});\n    } else {\n      return;\n    }\n  };\n\n  return (\n    <main>\n      <Searchbar onSubmit={handleSearchQuery} />\n      {isLoading && <Loader />}\n      {moviesByQuery && !isLoading && <MoviesList moviesList={moviesByQuery} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'eb8158c708d801ebc7494af7f42d91eb';\n\nexport const themoviedbAPI = {\n  async fetchTrending() {\n    const moviesData = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return moviesData;\n  },\n  async fetchByQuery(query) {\n    const moviesData = await axios.get(\n      `search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return moviesData;\n  },\n  async fetchById(id) {\n    const moviesData = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n    return moviesData;\n  },\n  async fetchCastById(id) {\n    const moviesData = await axios.get(\n      `/movie/${id}/credits?api_key=${API_KEY}`\n    );\n    return moviesData;\n  },\n  async fetchReviewsById(id) {\n    const moviesData = await axios.get(\n      `/movie/${id}/reviews?api_key=${API_KEY}`\n    );\n    return moviesData;\n  },\n};\n"],"names":["movie","location","useLocation","className","s","to","id","state","from","src","backdrop_path","noposter","alt","original_title","moviesList","map","onSubmit","useState","searchQuery","setSearchQuery","inputEl","useRef","reset","e","preventDefault","trimedSearchQuery","trim","current","focus","placeholder","ref","name","value","type","autoComplete","autoFocus","onInput","target","moviesByQuery","setMoviesByQuery","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","useEffect","themoviedbAPI","movies","data","results","console","log","get","fetchMoviesByQuery","query","Loader","MoviesList","axios","API_KEY","fetchTrending","moviesData","fetchByQuery","fetchById","fetchCastById","fetchReviewsById"],"sourceRoot":""}