{"version":3,"file":"static/js/135.6fea1efc.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx","services/themoviedbAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieCard\":\"MovieDetails_movieCard__UPRqg\",\"poster\":\"MovieDetails_poster__yO7gD\",\"title\":\"MovieDetails_title__cUGs9\",\"subTitle\":\"MovieDetails_subTitle__t78ZZ\",\"score\":\"MovieDetails_score__p8Kk2\",\"genres\":\"MovieDetails_genres__Pnmgt\",\"links\":\"MovieDetails_links__EzCWB\",\"button\":\"MovieDetails_button__uXZxd\",\"link\":\"MovieDetails_link__U+v+7\"};","import { Suspense, useState, useEffect } from 'react';\nimport {\n  Outlet,\n  NavLink,\n  Link,\n  useParams,\n  useLocation,\n} from 'react-router-dom';\nimport { themoviedbAPI } from 'services/themoviedbAPI';\nimport Loader from 'components/Loader/Loader';\nimport noposter from '../../assets/images/noposter.jpg';\nimport s from './MovieDetails.module.css';\n\nfunction MovieDetails() {\n  const [movieById, setMovieById] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    fetchMovieById(movieId);\n  }, [movieId]);\n\n  async function fetchMovieById(movieId) {\n    try {\n      const movie = await themoviedbAPI.fetchById(movieId);\n      setMovieById(movie.data);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Link className={s.link} to={backLinkHref}>\n        Back to list\n      </Link>\n      {isLoading && <Loader />}\n      {movieById && (\n        <div className={s.movieCard}>\n          <img\n            className={s.poster}\n            src={\n              movieById.poster_path\n                ? `https://image.tmdb.org/t/p/w500${movieById.poster_path}`\n                : noposter\n            }\n            alt={movieById.original_title}\n          />\n          <div>\n            <h2 className={s.title}>{movieById.original_title}</h2>\n            <p className={s.text}>\n              User Score:{' '}\n              <span className={s.score}>\n                {movieById.vote_average.toFixed(1)}\n              </span>{' '}\n              / {movieById.vote_count}\n            </p>\n            <h3 className={s.subTitle}>Overview</h3>\n            <p className={s.text}>{movieById.overview}</p>\n            <h3 className={s.subTitle}>Genres</h3>\n            <p className={s.genres}>\n              {movieById?.genres?.length > 0\n                ? movieById.genres.map(({ id, name }) => {\n                    return <span key={id}>{name}</span>;\n                  })\n                : 'There are no genres available'}\n            </p>\n          </div>\n        </div>\n      )}\n      <ul className={s.links}>\n        <li>\n          <NavLink\n            className={s.button}\n            to=\"cast\"\n            state={{ from: location.state?.from }}\n          >\n            Cast\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            className={s.button}\n            to=\"reviews\"\n            state={{ from: location.state?.from }}\n          >\n            Reviews\n          </NavLink>\n        </li>\n      </ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'eb8158c708d801ebc7494af7f42d91eb';\n\nexport const themoviedbAPI = {\n  async fetchTrending() {\n    const moviesData = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return moviesData;\n  },\n  async fetchByQuery(query) {\n    const moviesData = await axios.get(\n      `search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return moviesData;\n  },\n  async fetchById(id) {\n    const moviesData = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n    return moviesData;\n  },\n  async fetchCastById(id) {\n    const moviesData = await axios.get(\n      `/movie/${id}/credits?api_key=${API_KEY}`\n    );\n    return moviesData;\n  },\n  async fetchReviewsById(id) {\n    const moviesData = await axios.get(\n      `/movie/${id}/reviews?api_key=${API_KEY}`\n    );\n    return moviesData;\n  },\n};\n"],"names":["useState","movieById","setMovieById","isLoading","setIsLoading","movieId","useParams","location","useLocation","backLinkHref","state","from","themoviedbAPI","movie","data","console","log","useEffect","fetchMovieById","className","s","to","Loader","src","poster_path","noposter","alt","original_title","vote_average","toFixed","vote_count","overview","genres","length","map","id","name","Suspense","fallback","axios","API_KEY","fetchTrending","moviesData","fetchByQuery","query","fetchById","fetchCastById","fetchReviewsById"],"sourceRoot":""}